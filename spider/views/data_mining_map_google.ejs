<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title><%= title %></title>
	<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
	<!-- <link rel="stylesheet" type="text/css" href="/lib/bootstrap/dist/css/bootstrap.min.css"> -->
	<script src="/lib/jquery/dist/jquery.min.js" type="text/javascript" charset="utf-8" async defer></script>
	<!-- <script src="/lib/bootstrap/dist/js/bootstrap.min.js" type="text/javascript" charset="utf-8" async defer></script> -->
	<!-- <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAnlGl1bMu19QXpr2BDnqx2FmHp6WIlFbI&signed_in=true"></script> -->
	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAnlGl1bMu19QXpr2BDnqx2FmHp6WIlFbI" type="text/javascript"></script>
	<style type="text/css" media="screen">
	
	</style>
</head>
<body>
	<div id="map" style="width:800px;height:620px"></div>  
	<button type="button" class="btn btn-default" onclick="showOver()">显示</button>
	<button type="button" class="btn btn-danger" onclick="hideOver()">隐藏</button>


	<script>


		function GetQueryString(name)
		{
		     var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
		     var r = window.location.search.substr(1).match(reg);
		     if(r!=null)return  unescape(r[2]); return null;
		}
		
		getAddr(GetQueryString('startNum'),GetQueryString('size'));

		function getAddr(startNum,size){

			$.ajax({  
	            type: "get",  
	            async: true,  
	            url: 'https://api.aminer.org/api/search/person?as_nationality=Taiwan&offset='+startNum+'&query=Data+Mining&size='+size+'&sort=relevance',
	            success: function (data) {  

	            	data.result.forEach(function(item, index){
	            		update(item);
	            	});


	            }
	        })
		}


		function update(item){

			(function(el){
	  			$.ajax({  
		            type: "get",  
		            async: true,  
		            url: 'https://maps.googleapis.com/maps/api/geocode/json?address=' + el.aff.desc + '&key=AIzaSyAnlGl1bMu19QXpr2BDnqx2FmHp6WIlFbI',
		            success: function (data) {  

		            		if(data.status === "OK"){

		            			var location = data.results[0].geometry.location;

		            			if(location){
			            			var lat = location.lat;
			            			var lng = location.lng;

			            			$.ajax({  
							            type: "get",  
							            async: true,  
							            url: '/people',
							            data: {lat: lat, lng: lng, _id: el.id},
							            success: function (data) {  
							            	console.log(data.message);

							            }
							        })

		            			}


		            		}
		            }
		        })
	  		})(item)

		}
	</script>

<!-- 

    <script>
    	// [START region_initialization]
		// This example creates a custom overlay called USGSOverlay, containing
		// a U.S. Geological Survey (USGS) image of the relevant area on the map.

		// Set the custom overlay object's prototype to a new instance
		// of OverlayView. In effect, this will subclass the overlay class therefore
		// it's simpler to load the API synchronously, using
		// google.maps.event.addDomListener().
		// Note that we set the prototype to an instance, rather than the
		// parent class itself, because we do not wish to modify the parent class.

		var overlay;
		USGSOverlay.prototype = new google.maps.OverlayView();

		// Initialize the map and the custom overlay.

		function initMap() {
		  var map = new google.maps.Map(document.getElementById('map'), {
		    zoom: 11,
		    center: {lat: 62.323907, lng: -150.109291},
		    mapTypeId: google.maps.MapTypeId.ROADMAP
		  });

		  var bounds = new google.maps.LatLngBounds(
		      new google.maps.LatLng(62.281819, -150.287132),
		      new google.maps.LatLng(62.400471, -150.005608));

		  // The photograph is courtesy of the U.S. Geological Survey.
		  var srcImage = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/talkeetna.png';

		  // The custom USGSOverlay object contains the USGS image,
		  // the bounds of the image, and a reference to the map.
		  overlay = new USGSOverlay(bounds, srcImage, map);
		}
		// [END region_initialization]

		// [START region_constructor]
		/** @constructor */
		function USGSOverlay(bounds, image, map) {

		  // Initialize all properties.
		  this.bounds_ = bounds;
		  this.image_ = image;
		  this.map_ = map;

		  // Define a property to hold the image's div. We'll
		  // actually create this div upon receipt of the onAdd()
		  // method so we'll leave it null for now.
		  this.div_ = null;

		  // Explicitly call setMap on this overlay.
		  this.setMap(map);
		}
		// [END region_constructor]

		// [START region_attachment]
		/**
		 * onAdd is called when the map's panes are ready and the overlay has been
		 * added to the map.
		 */
		USGSOverlay.prototype.onAdd = function() {

		  var div = document.createElement('div');
		  div.style.borderStyle = 'none';
		  div.style.borderWidth = '0px';
		  div.style.position = 'absolute';

		  // Create the img element and attach it to the div.
		  var img = document.createElement('img');
		  img.src = this.image_;
		  img.style.width = '100%';
		  img.style.height = '100%';
		  img.style.position = 'absolute';
		  div.appendChild(img);

		  this.div_ = div;

		  // Add the element to the "overlayLayer" pane.
		  var panes = this.getPanes();
		  panes.overlayLayer.appendChild(div);
		};
		// [END region_attachment]

		// [START region_drawing]
		USGSOverlay.prototype.draw = function() {

		  // We use the south-west and north-east
		  // coordinates of the overlay to peg it to the correct position and size.
		  // To do this, we need to retrieve the projection from the overlay.
		  var overlayProjection = this.getProjection();

		  // Retrieve the south-west and north-east coordinates of this overlay
		  // in LatLngs and convert them to pixel coordinates.
		  // We'll use these coordinates to resize the div.
		  var sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());
		  var ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());

		  // Resize the image's div to fit the indicated dimensions.
		  var div = this.div_;
		  div.style.left = sw.x + 'px';
		  div.style.top = ne.y + 'px';
		  div.style.width = (ne.x - sw.x) + 'px';
		  div.style.height = (sw.y - ne.y) + 'px';
		};
		// [END region_drawing]

		// [START region_removal]
		// The onRemove() method will be called automatically from the API if
		// we ever set the overlay's map property to 'null'.
		USGSOverlay.prototype.onRemove = function() {
		  this.div_.parentNode.removeChild(this.div_);
		  this.div_ = null;
		};
		// [END region_removal]

		google.maps.event.addDomListener(window, 'load', initMap);


    </script>
-->
	<!-- <script>
		function initMap() {
			// Create a map object and specify the DOM element for display.
			var map = new google.maps.Map(document.getElementById('map'), {
				center: {lat: -34.397, lng: 150.644},
				scrollwheel: false,
				zoom: 8
			});
		}
	</script> -->

    <!-- <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAnlGl1bMu19QXpr2BDnqx2FmHp6WIlFbI&callback=initMap"
    async defer></script> -->
</body>
</html>