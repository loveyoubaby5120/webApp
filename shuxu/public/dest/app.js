webpackJsonp([0],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PageNotFound = exports.App = exports.User = undefined;
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(33);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	// import ReactDom from 'react-dom'
	
	var User = exports.User = function (_React$Component) {
	  _inherits(User, _React$Component);
	
	  function User() {
	    _classCallCheck(this, User);
	
	    return _possibleConstructorReturn(this, Object.getPrototypeOf(User).apply(this, arguments));
	  }
	
	  _createClass(User, [{
	    key: 'render',
	    value: function render() {
	      var userID = this.props.params.userID;
	      var query = this.props.location.query;
	
	      var age = query && query.showAge ? '33' : '';
	
	      return _react2.default.createElement('div', { className: 'User' }, _react2.default.createElement('h1', null, 'User id: ', userID), age);
	    }
	  }]);
	
	  return User;
	}(_react2.default.Component);
	
	var App = exports.App = function (_React$Component2) {
	  _inherits(App, _React$Component2);
	
	  function App() {
	    _classCallCheck(this, App);
	
	    return _possibleConstructorReturn(this, Object.getPrototypeOf(App).apply(this, arguments));
	  }
	
	  _createClass(App, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement('div', null, _react2.default.createElement('ul', null, _react2.default.createElement('li', null, _react2.default.createElement(_reactRouter.Link, { to: '/other/user/bob', activeClassName: 'active' }, 'Bob')), _react2.default.createElement('li', null, _react2.default.createElement(_reactRouter.Link, { to: { pathname: '/other/user/bob', query: { showAge: true } }, activeClassName: 'active' }, 'Bob With Query Params')), _react2.default.createElement('li', null, _react2.default.createElement(_reactRouter.Link, { to: '/other/user/sally', activeClassName: 'active' }, 'Sally'))), this.props.children);
	    }
	  }]);
	
	  return App;
	}(_react2.default.Component);
	
	var PageNotFound = exports.PageNotFound = function (_React$Component3) {
	  _inherits(PageNotFound, _React$Component3);
	
	  function PageNotFound() {
	    _classCallCheck(this, PageNotFound);
	
	    return _possibleConstructorReturn(this, Object.getPrototypeOf(PageNotFound).apply(this, arguments));
	  }
	
	  _createClass(PageNotFound, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement('div', null, _react2.default.createElement('h1', null, 'Page Not Found.'), _react2.default.createElement('p', null, 'Go to ', _react2.default.createElement(_reactRouter.Link, { to: '/' }, 'Home Page')));
	    }
	  }]);
	
	  return PageNotFound;
	}(_react2.default.Component);

/***/ }
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wdWJsaWMvanMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFhOztBQUVQLFFBQWUsZUFBUSxTQUFjO0FBQ3BDLFVBQ0o7QUFGMEM7QUFHdEMsU0FBYSxlQUFVLFFBQUksTUFBVSxRQUFLLE9BQWE7O0FBRTlELEtBQWdCLDJCQUFnQjtBQUFDLDZCQUFnQyxRQUFPLE9BQUc7QUFBQyxVQUFLLElBQUssSUFBSSxHQUFHLElBQVEsTUFBTyxRQUFLLEtBQUU7QUFBRSxXQUFjLGFBQVEsTUFBSSxHQUFXLFdBQVcsYUFBYSxXQUFXLGNBQVUsTUFBVyxXQUFhLGVBQVEsS0FBQyxJQUFXLFdBQWMsWUFBWSxXQUFTLFdBQVEsS0FBTyxPQUFlLGVBQU8sUUFBWSxXQUFJLEtBQWM7QUFBRTtBQUFFLElBQUMsT0FBTyxVQUFxQixhQUFZLFlBQWEsYUFBRztBQUFDLFNBQWMsWUFBRSxpQkFBNEIsWUFBVSxXQUFjLFlBQUMsSUFBZSxhQUFFLGlCQUE0QixhQUFlLGFBQUMsT0FBbUI7QUFBRztBQUFLLEVBQWppQjs7QUFFbkIsS0FBVSxTQUFHLG9CQUFpQjs7QUFFOUIsS0FBVyxVQUFHLHVCQUErQjs7QUFFN0MsS0FBZ0IsZUFBRyxvQkFBd0I7O0FBRTNDLGlDQUFtQyxLQUFHO0FBQUMsVUFBVSxPQUFPLElBQVcsYUFBTSxNQUFHLEVBQVMsU0FBUTtBQUFFOztBQUUvRiwwQkFBaUMsVUFBYSxhQUFHO0FBQUMsT0FBSSxFQUFVLG9CQUF3QixjQUFFO0FBQUUsV0FBTSxJQUFJLFVBQStDO0FBQUU7QUFBRTs7QUFFekoscUNBQXdDLE1BQU0sTUFBRztBQUFDLE9BQUksQ0FBSyxNQUFFO0FBQUUsV0FBTSxJQUFJLGVBQTRFO0FBQUUsSUFBQyxPQUFXLFNBQUssT0FBVyxTQUFhLFlBQUksT0FBVyxTQUFnQixjQUFPLE9BQVE7QUFBRTs7QUFFaFAsb0JBQTJCLFVBQVksWUFBRztBQUFDLE9BQUksT0FBaUIsZUFBZSxjQUFjLGVBQVMsTUFBRTtBQUFFLFdBQU0sSUFBSSxVQUFvRSw2REFBRyxPQUFtQjtBQUFFLElBQVMsU0FBVSxZQUFTLE9BQU8sT0FBVyxjQUFjLFdBQVUsV0FBRSxFQUFhLGFBQUUsRUFBTyxPQUFVLFVBQVksWUFBTyxPQUFVLFVBQU0sTUFBYyxjQUFZLFVBQUMsSUFBYyxZQUFRLE9BQWUsaUJBQVMsT0FBZSxlQUFTLFVBQWEsY0FBVyxTQUFVLFlBQWM7QUFFNWU7OztBQUVBLEtBQVEsT0FBVSxRQUFLLGlCQUE2QixrQkFDcEQ7QUFBRSxhQUFjLE1BQW9COztBQUVsQyxZQUFhLE9BQ2Y7QUFBSSxxQkFBb0IsTUFBUTs7QUFFNUIsWUFBTywyQkFBK0IsTUFBUSxPQUFlLGVBQU0sTUFBTSxNQUFLLE1BQ2xGO0FBQUc7O0FBRUQsZ0JBQWlCO0FBQ1osVUFBVTtBQUNSLFlBQUUsU0FBZSxTQUFJO0FBQ3hCLFdBQVUsU0FBTyxLQUFNLE1BQU8sT0FDcEM7QUFBTSxXQUFTLFFBQU8sS0FBTSxNQUFTLFNBRXJDOztBQUFNLFdBQU8sTUFBUSxTQUFTLE1BQVEsVUFBTyxPQUFNOztBQUU3QyxjQUFjLFFBQVEsUUFBYyxjQUM3QixPQUNMLEVBQVcsV0FBVSxVQUNkLFFBQVEsUUFBYyxjQUN2QixNQUNBLE1BQ08sYUFFWixTQUVEO0FBRUY7QUFwQmdCLElBQUQ7O0FBc0JuQixVQUNGO0FBQUMsRUFoQ3lCLENBZ0NqQixRQUFRLFFBQVk7O0FBRTdCLEtBQU8sTUFBVSxRQUFJLGdCQUE4QixtQkFDbkQ7QUFBRSxhQUFhLEtBQXFCOztBQUVsQyxZQUFZLE1BQ2Q7QUFBSSxxQkFBb0IsTUFBTzs7QUFFM0IsWUFBTywyQkFBK0IsTUFBUSxPQUFlLGVBQUssS0FBTSxNQUFLLE1BQ2pGO0FBQUc7O0FBRUQsZ0JBQWdCO0FBQ1gsVUFBVTtBQUNSLFlBQUUsU0FBZSxTQUFJO0FBQ3hCLGNBQWMsUUFBUSxRQUFjLGNBQzdCLE9BQ0QsTUFDRyxRQUFRLFFBQWMsY0FDdkIsTUFDQSxNQUNHLFFBQVEsUUFBYyxjQUN2QixNQUNBLE1BQ0csUUFBUSxRQUFjLGNBQ2YsYUFBSyxNQUNqQixFQUFJLElBQW1CLG1CQUFpQixpQkFBWSxZQUd2RCxTQUNNLFFBQVEsUUFBYyxjQUN2QixNQUNBLE1BQ0csUUFBUSxRQUFjLGNBQ2YsYUFBSyxNQUNqQixFQUFJLElBQUUsRUFBVSxVQUFtQixtQkFBTyxPQUFFLEVBQVMsU0FBVSxVQUFpQixpQkFBWSxZQUcvRiwyQkFDTSxRQUFRLFFBQWMsY0FDdkIsTUFDQSxNQUNHLFFBQVEsUUFBYyxjQUNmLGFBQUssTUFDakIsRUFBSSxJQUFxQixxQkFBaUIsaUJBQVksWUFJM0QsWUFDRyxLQUFNLE1BQ1Y7QUFFRjtBQXhDZSxJQUFEOztBQTBDbEIsVUFDRjtBQUFDLEVBcER1QixDQW9EZixRQUFRLFFBQVk7O0FBRTdCLEtBQWdCLGVBQVUsUUFBYSx5QkFBOEIsbUJBQ3JFO0FBQUUsYUFBc0IsY0FBcUI7O0FBRTNDLFlBQXFCLGVBQ3ZCO0FBQUkscUJBQW9CLE1BQWdCOztBQUVwQyxZQUFPLDJCQUErQixNQUFRLE9BQWUsZUFBYyxjQUFNLE1BQUssTUFDMUY7QUFBRzs7QUFFRCxnQkFBeUI7QUFDcEIsVUFBVTtBQUNSLFlBQUUsU0FBZSxTQUFJO0FBQ3hCLGNBQWMsUUFBUSxRQUFjLGNBQzdCLE9BQ0QsTUFDRyxRQUFRLFFBQWMsY0FDdkIsTUFDQSxNQUVMLG9CQUNNLFFBQVEsUUFBYyxjQUN4QixLQUNDLE1BQ0ksVUFDRCxRQUFRLFFBQWMsY0FDZixhQUFLLE1BQ2pCLEVBQUksSUFBTyxPQUlmO0FBRUY7QUF2QndCLElBQUQ7O0FBeUIzQixVQUFvQjtBQUNyQixFQW5DeUMsQ0FtQ2pDLFFBQVEsUUFBVyxXIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUGFnZU5vdEZvdW5kID0gZXhwb3J0cy5BcHAgPSBleHBvcnRzLlVzZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdFJvdXRlciA9IHJlcXVpcmUoJ3JlYWN0LXJvdXRlcicpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG4vLyBpbXBvcnQgUmVhY3REb20gZnJvbSAncmVhY3QtZG9tJ1xuXG5cbnZhciBVc2VyID0gZXhwb3J0cy5Vc2VyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFVzZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFVzZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVzZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihVc2VyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhVc2VyLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciB1c2VySUQgPSB0aGlzLnByb3BzLnBhcmFtcy51c2VySUQ7XG4gICAgICB2YXIgcXVlcnkgPSB0aGlzLnByb3BzLmxvY2F0aW9uLnF1ZXJ5O1xuXG4gICAgICB2YXIgYWdlID0gcXVlcnkgJiYgcXVlcnkuc2hvd0FnZSA/ICczMycgOiAnJztcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdVc2VyJyB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnaDEnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgJ1VzZXIgaWQ6ICcsXG4gICAgICAgICAgdXNlcklEXG4gICAgICAgICksXG4gICAgICAgIGFnZVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVXNlcjtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbnZhciBBcHAgPSBleHBvcnRzLkFwcCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50Mikge1xuICBfaW5oZXJpdHMoQXBwLCBfUmVhY3QkQ29tcG9uZW50Mik7XG5cbiAgZnVuY3Rpb24gQXBwKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBcHApO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihBcHApLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFwcCwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBudWxsLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAndWwnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBfcmVhY3RSb3V0ZXIuTGluayxcbiAgICAgICAgICAgICAgeyB0bzogJy9vdGhlci91c2VyL2JvYicsIGFjdGl2ZUNsYXNzTmFtZTogJ2FjdGl2ZScgfSxcbiAgICAgICAgICAgICAgJ0JvYidcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgX3JlYWN0Um91dGVyLkxpbmssXG4gICAgICAgICAgICAgIHsgdG86IHsgcGF0aG5hbWU6ICcvb3RoZXIvdXNlci9ib2InLCBxdWVyeTogeyBzaG93QWdlOiB0cnVlIH0gfSwgYWN0aXZlQ2xhc3NOYW1lOiAnYWN0aXZlJyB9LFxuICAgICAgICAgICAgICAnQm9iIFdpdGggUXVlcnkgUGFyYW1zJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBfcmVhY3RSb3V0ZXIuTGluayxcbiAgICAgICAgICAgICAgeyB0bzogJy9vdGhlci91c2VyL3NhbGx5JywgYWN0aXZlQ2xhc3NOYW1lOiAnYWN0aXZlJyB9LFxuICAgICAgICAgICAgICAnU2FsbHknXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBcHA7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG52YXIgUGFnZU5vdEZvdW5kID0gZXhwb3J0cy5QYWdlTm90Rm91bmQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudDMpIHtcbiAgX2luaGVyaXRzKFBhZ2VOb3RGb3VuZCwgX1JlYWN0JENvbXBvbmVudDMpO1xuXG4gIGZ1bmN0aW9uIFBhZ2VOb3RGb3VuZCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFnZU5vdEZvdW5kKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUGFnZU5vdEZvdW5kKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQYWdlTm90Rm91bmQsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2gxJyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgICdQYWdlIE5vdCBGb3VuZC4nXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdwJyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgICdHbyB0byAnLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX3JlYWN0Um91dGVyLkxpbmssXG4gICAgICAgICAgICB7IHRvOiAnLycgfSxcbiAgICAgICAgICAgICdIb21lIFBhZ2UnXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQYWdlTm90Rm91bmQ7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vfi9iYWJlbC1sb2FkZXI/e1wicHJlc2V0c1wiOltcImVzMjAxNVwiLFwicmVhY3RcIixcInN0YWdlLTBcIl19IS4vcHVibGljL2pzL2luZGV4LmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==